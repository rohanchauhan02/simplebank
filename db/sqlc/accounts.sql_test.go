// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: accounts.sql

package db

// import (
// 	"context"
// 	"database/sql"
// 	"log"
// 	"reflect"
// 	"testing"
// 	"time"
// 	_ "github.com/lib/pq"
// )
// const (
// 	dbDriver = "postgres"
// 	dbSource = "postgresql://root:root@localhost:5432/simple_bank?sslmode=disable"
// )

// var testQueries *Queries
// func TestQueries_CreateAccounts(t *testing.T) {

// 	conn, err := sql.Open(dbDriver, dbSource)
// 	if err != nil {
// 		log.Fatal("canot connect to db:", err)
// 	}


// 	type args struct {
// 		ctx context.Context
// 		arg CreateAccountsParams
// 	}
// 	tests := []struct {
// 		name    string
// 		args    args
// 		want    Account
// 		wantErr bool
// 	}{
// 		// TODO: Add test cases.
// 		{
// 			name: "TEST 1",
// 			args: args{
// 				ctx: context.Background(),
// 				arg: CreateAccountsParams{
// 					Owner:    "Tom",
// 					Balance:  100,
// 					Currency: "INR",
// 				},
// 			},
// 			want: Account{
// 				ID: 1,
// 				Owner: "Tom",
// 				Balance:  100,
// 				Currency: "INR",
// 				CreatedAt: time.Now(),
// 			},
// 			wantErr: false,
// 		},

// 	}
// 	testQueries = New(conn)
// 	for _, tt := range tests {
// 		t.Run(tt.name, func(t *testing.T) {
// 			q := testQueries
// 			got, err := q.CreateAccounts(tt.args.ctx, tt.args.arg)
// 			if (err != nil) != tt.wantErr {
// 				t.Errorf("Queries.CreateAccounts() error = %v, wantErr %v", err, tt.wantErr)
// 				return
// 			}
// 			if !reflect.DeepEqual(got, tt.want) {
// 				t.Errorf("Queries.CreateAccounts() = %v, want %v", got, tt.want)
// 			}
// 		})
// 	}
// }
